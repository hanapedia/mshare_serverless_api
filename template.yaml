AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mshare_serverless_api

Outputs:
  HttpApi:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${CustomDomainName}'
  MoviesTable:
    Description: 'Movies table'
    Value: !GetAtt MoviesTable.Arn
  PutMovieScoreQueue:
    Description: 'Put movie score Queue arn'
    Value: !GetAtt PutMovieScoreQueue.Arn

Parameters:
  AllowOriginsParameter:
    Type: CommaDelimitedList
    Description: 'Allowed origins for CORS config'
  AccessLogFormatParameter:
    Type: String
    Description: 'Format for access log of http API'
  JwtConfigIssuer:
    Type: String
    Description: 'Jwt issuer for api jwt authorizer'
  JwtConfigAudience:
    Type: String
    Description: 'Jwt audience for api jwt authorizer'
  CustomDomainName:
    Type: String
    Description: 'Custom Domain name for the api'
  AcmCertificateArn:
    Type: String
    Description: 'Arn of Certificate in Amazon certificate manager'
  CustomDomainHostedZoneId:
    Type: String
    Description: 'Id of the hosted zone of the domain name'

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs16.x
    Handler: handler.lambdaHandler
    Architectures:
      - x86_64

Resources:
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: mshare
      ProtocolType: HTTP
      CorsConfiguration:
        AllowHeaders:
          - 'Authorization'
          - 'Content-Type'
        AllowMethods:
          - 'GET'
          - 'POST'
          - 'PUT'
        AllowOrigins: !Ref AllowOriginsParameter
        MaxAge: 600
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt HttpApiAccessLogGroup.Arn
        Format: !Ref AccessLogFormatParameter
  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      Name: OAuth2Authorizer
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Issuer: !Ref JwtConfigIssuer
        Audience:
          - !Ref JwtConfigAudience
  HttpApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'SqsSendPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:SendMessage'
                  - 'sqs:GetQueueUrl'
                  - 'sqs:SendMessageBatch'
                Resource: !GetAtt PutMovieScoreQueue.Arn
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
                  - 'logs:GetLogEvents'
                  - 'logs:FilterLogEvents'
                Resource: !GetAtt HttpApiAccessLogGroup.Arn
  HttpApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 'mshare-api-log-group'
      RetentionInDays: 1
  HttpApiCustomDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: !Ref CustomDomainName
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: !Ref AcmCertificateArn
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Ref CustomDomainName
      ApiId: !Ref HttpApi
      Stage: !Ref HttpApiStage
    DependsOn: HttpApiCustomDomain
  CustomDomainRecordGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref CustomDomainHostedZoneId
      RecordSets:
        - Name: !Ref CustomDomainName
          # Type: CNAME
          # ResourceRecords:
          #   - !GetAtt HttpApiCustomDomain.RegionalDomainName
          # TTL: '60'
          Type: A
          AliasTarget:
            DNSName: !GetAtt HttpApiCustomDomain.RegionalDomainName
            HostedZoneId: !GetAtt HttpApiCustomDomain.RegionalHostedZoneId

  GetMoviesApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /movies
      Target: !Sub 'integrations/${GetMoviesApiIntegration}'
  GetMoviesApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt GetMoviesFunction.Arn
      PayloadFormatVersion: '2.0'
  GetMoviesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MoviesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - getMovies/handler.ts
  GetMoviesFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GetMoviesFunction
      Principal: 'apigateway.amazonaws.com'
  GetMoviesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetMoviesFunction}
      RetentionInDays: 1

  PostMovieApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: POST /movies
      Target: !Sub 'integrations/${PostMovieApiIntegration}'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
  PostMovieApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt PostMovieFunction.Arn
      PayloadFormatVersion: '2.0'
  PostMovieFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MoviesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - postMovie/handler.ts
  PostMovieFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref PostMovieFunction
      Principal: 'apigateway.amazonaws.com'
  PostMovieFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostMovieFunction}
      RetentionInDays: 1

  PutMovieScoreApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: PUT /movies/{movieId}
      Target: !Sub 'integrations/${PutMovieScoreApiIntegration}'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
  PutMovieScoreApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      CredentialsArn: !GetAtt HttpApiRole.Arn
      PayloadFormatVersion: '1.0'
      IntegrationType: AWS_PROXY
      IntegrationSubtype: SQS-SendMessage
      RequestParameters:
        QueueUrl: !Ref PutMovieScoreQueue
        MessageBody: $request.body
        MessageGroupId: $request.path.movieId
  PutMovieScoreQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PutMovieScoreDLQ.Arn
        maxReceiveCount: 1
  PutMovieScoreDLQ:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      ContentBasedDeduplication: true
      MessageRetentionPeriod: 300
  PutMovieScoreFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Events:
        HttpApiEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PutMovieScoreQueue.Arn
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref MoviesTable
        - SQSPollerPolicy:
            QueueName: !GetAtt PutMovieScoreQueue.QueueName
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - putMovieScore/handler.ts
  PutMovieScoreFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutMovieScoreFunction}
      RetentionInDays: 1

  GetMovieByIdApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /movies/{movieId}
      Target: !Sub 'integrations/${GetMovieByIdApiIntegration}'
  GetMovieByIdApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt GetMovieByIdFunction.Arn
      PayloadFormatVersion: '2.0'
  GetMovieByIdFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MoviesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - getMovieById/handler.ts
  GetMovieByIdFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GetMovieByIdFunction
      Principal: 'apigateway.amazonaws.com'
  GetMovieByIdFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetMovieByIdFunction}
      RetentionInDays: 1

  GetRandomMovieApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: GET /movies/random
      Target: !Sub 'integrations/${GetRandomMovieApiIntegration}'
  GetRandomMovieApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt GetRandomMovieFunction.Arn
      PayloadFormatVersion: '2.0'
  GetRandomMovieFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MoviesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - getRandomMovie/handler.ts
  GetRandomMovieFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GetRandomMovieFunction
      Principal: 'apigateway.amazonaws.com'
  GetRandomFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetRandomMovieFunction}
      RetentionInDays: 1

  MoviesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: movies
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: movieId
          AttributeType: S
        - AttributeName: title
          AttributeType: S
        - AttributeName: genre
          AttributeType: S
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: genreIndex
          KeySchema:
            - AttributeName: genre
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: userIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: titleIndex
          KeySchema:
            - AttributeName: title
              KeyType: HASH
          Projection:
            ProjectionType: ALL
