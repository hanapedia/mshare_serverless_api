AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mshare_serverless_api

  Sample SAM Template for mshare_serverless_api

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Runtime: nodejs16.x
    Handler: handler.lambdaHandler
    Architectures:
      - x86_64

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Description: 'Http Api gateway'
      Auth:
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: 'https://hanapedia.jp.auth0.com'
              audience:
                - 'https://mshare-auth.com'
            IdentitySource: '$request.header.Authorization'
      CorsConfiguration:
        AllowHeaders:
          - 'Authorization'
          - 'Content-Type'
        AllowMethods:
          - 'GET'
          - 'POST'
          - 'PUT'
        AllowOrigins:
          - 'http://localhost:3000'
          - 'https://mshare-web-app-vercel.app'
        MaxAge: 600

  MoviesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: movies
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: movieId
          AttributeType: S
        - AttributeName: title
          AttributeType: S
        - AttributeName: genre
          AttributeType: S
      KeySchema:
        - AttributeName: movieId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: genreIndex
          KeySchema:
            - AttributeName: genre
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: userIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: titleIndex
          KeySchema:
            - AttributeName: title
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  GetMoviesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Events:
        HttpApiEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /movies
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MoviesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - getMovies/handler.ts

  GetMovieByIdFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Events:
        HttpApiEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /movies/{movieId}
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MoviesTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - getMovieById/handler.ts

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Events:
        HttpApiEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /hello
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - hello/handler.ts
  ByeWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: src/
      Events:
        HttpApiEvent:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /bye
            Auth:
              Authorizer: OAuth2Authorizer
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: 'es2020'
        Sourcemap: true
        EntryPoints:
          - bye/handler.ts

Outputs:
  HelloWorldApi:
    Description: 'API Gateway endpoint URL for Prod stage for Hello World function'
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/hello'
  ByeWorldApi:
    Description: 'API Gateway endpoint URL for Prod stage for bye World function'
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/bye'
  HelloWorldFunction:
    Description: 'Hello World Lambda Function ARN'
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: 'Implicit IAM Role created for Hello World function'
    Value: !GetAtt HelloWorldFunctionRole.Arn
  MoviesTable:
    Description: 'Movies table'
    Value: !GetAtt MoviesTable.Arn
